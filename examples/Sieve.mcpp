// Sieve.mcpp                                HDO, 2006-09-13
// ----------
// Sieve of Erathostenes in MiniCpp.
//=====================================|====================

void Sieve(int n); // declaration

const int lol = 12, abcd = 25;
const bool isTesting = true;
int seppster = 15, bert = 4;

void main(int input) {
    int x = 0;
    int y = 5;
    int z = 10;
    int v = 15;
    z = y = x = v = 25;

    int* arr = nullptr;
    int* arr2 = nullptr;
    arr = new int[10];
    arr2 = new int[10];

    arr2 = arr =  nullptr;
     x = arr[2] += z += 15;

  int n;

  cout << "n > ";
  cin >> n;
  
  if (n < 3) {
    cout << "error: number too small (min. 3)" << endl;
    return;
  } else if (n > 46340) {
    cout << "error: number too large (max. 46340)" << endl;
    return;
  } // if
  
  Sieve(n);
  
  // int dummy;
  // cin >> dummy;
  
} // main


int GetInt(int a, bool b) {
  return a;
}

void MyFunc(void) {
    int a = 5;
   /* while(a < 10) {
        a++;
    }*/


   /*int* arr2 = nullptr;
   arr2 = new int[10];
   arr2[1] = 15;*/
/*int d = 3;
  int e = 4;
  e++;
  e--;



  

d+= d;
  int c;





     bool bb, a = true, b = false;
     b =  a || b || c && a && b;


     int abc = 5;
     if(abc < 5) {
        abc = 10;
     }else {
        abc = 15;
     }
     while(abc < 10) {
        cout << abc << endl;
     }

  //c = a * d * d /a % d ;


  int* arr = nullptr;
  arr = new int[10];
   ++arr[6];
   int x = 15;
   int aa = 8;
   x = x + aa;
   Sieve(GetInt(5, true));

 
  x = d+ abc -( x + abc * 6);
  Sieve(d+abc);*/


  //c = c+ c;
}



void Sieve(int n) { // defintion
  int col, i, j;
  bool *sieve = nullptr;
  sieve = new bool[n + 1];
  Sieve(0);
  i = 2;
  while (i <= n) {
    sieve[i] = true;
    i++;
  } // while

  cout << 2 << "\t";
  
  col = 1;
  i = 3;
  while (i <= n) {
    if (sieve[i]) {
      if (col == 10) {
        cout << endl;
        col = 0;
      } // if
      ++col;
      cout << i  << "\t";
      j = i * i; // attention: 46341 * 46341 > 2**31
      while (j <= n) {
        sieve[j] = false;
        j += 2 * i;
      } // while
    } // if
    i += 2;
  } // while
  
  delete[] sieve;
} // Sieve


// End of Sieve.mcpp
//=====================================|====================

